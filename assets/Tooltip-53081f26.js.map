{"version":3,"file":"Tooltip-53081f26.js","sources":["../../components/Tooltip/Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@xstyled/styled-components';\n\nimport Frame from '../Frame';\n\nconst Tip = styled(Frame)`\n  background: radial-gradient(#ff0 20%, transparent 20%) 0 0,\n    radial-gradient(#ff0 20%, transparent 20%) 4px 4px,\n    radial-gradient(rgba(255, 255, 255, 0.1) 20%, transparent 25%) 0 1px,\n    radial-gradient(rgba(255, 255, 255, 0.1) 20%, transparent 25%) 3px 4px;\n  background-size: 7px 7px;\n  background-color: borderLightest;\n  border: 1;\n  padding: 2 2 2 4;\n  box-shadow: none;\n  position: absolute;\n  top: -20px;\n  text-align: center;\n  z-index: taskbar;\n`;\n\nexport type TooltipProps = {\n  text?: string;\n  delay?: number;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst Wrapper = styled.div`\n  display: inline-block;\n  position: relative;\n  cursor: default;\n  white-space: nowrap;\n`;\n\nconst TooltipRenderer = (\n  { children, text, delay, ...rest }: TooltipProps,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const [show, setShow] = React.useState(false);\n  const [delayTimer, setDelayTimer] = React.useState(0);\n\n  const handleEnter = () => {\n    const timer = window.setTimeout(() => {\n      setShow(true);\n    }, delay);\n\n    setDelayTimer(timer);\n  };\n\n  const handleLeave = () => {\n    clearTimeout(delayTimer);\n    setShow(false);\n  };\n\n  return (\n    <Wrapper\n      onMouseEnter={handleEnter}\n      onMouseLeave={handleLeave}\n      {...rest}\n      ref={ref}\n    >\n      {show && <Tip>{text}</Tip>}\n      {children}\n    </Wrapper>\n  );\n};\n\nconst Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>(TooltipRenderer);\n\nfunction formatDate(date: Date): string {\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const day = date.getDate();\n  const monthIndex = date.getMonth();\n  const year = date.getFullYear();\n\n  return `${day.toString().padStart(2, '0')} ${monthNames[monthIndex]} ${year}`;\n}\n\nTooltip.defaultProps = {\n  delay: 1000,\n  text: formatDate(new Date()),\n};\n\nexport default Tooltip;\n"],"names":["Tip","styled","Frame","Wrapper","TooltipRenderer","children","text","delay","rest","ref","show","setShow","React.useState","delayTimer","setDelayTimer","jsxs","timer","jsx","Tooltip","React.forwardRef","formatDate","date","monthNames","day","monthIndex","year","Tooltip$1"],"mappings":"sIAKA,MAAAA,EAAAC,EAAAC,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBAC,EAAAF,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOAG,EAAA,CAAA,CAAA,SAAAC,EAAA,KAAAC,EAAA,MAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAIE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,CAAA,EAeA,OAAAG,EACEZ,EAAC,CAAA,aAdH,IAAA,CACE,MAAAa,EAAA,OAAA,WAAA,IAAA,CACEL,EAAA,EAAA,CAAY,EAAAJ,CAAA,EAGdO,EAAAE,CAAA,CAAmB,EAUH,aAPlB,IAAA,CACE,aAAAH,CAAA,EACAF,EAAA,EAAA,CAAa,EAMG,GAAAH,EACV,IAAAC,EACJ,SAAA,CAECC,GAAAO,EAAAjB,EAAA,CAAA,SAAAM,CAAA,CAAA,EAAmBD,CACnB,CAAA,CAAA,CAGP,EAEAa,EAAAC,EAAAA,WAAAf,CAAA,EAEA,SAAAgB,EAAAC,EAAA,CACE,MAAAC,EAAA,CAAmB,UACjB,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,UACA,EAGFC,EAAAF,EAAA,UACAG,EAAAH,EAAA,WACAI,EAAAJ,EAAA,cAEA,MAAA,GAAAE,EAAA,SAAA,EAAA,SAAA,EAAA,GAAA,KAAAD,EAAAE,CAAA,KAAAC,GACF,CAEAP,EAAA,aAAA,CAAuB,MAAA,IACd,KAAAE,EAAA,IAAA,IAAA,CAET,EAEA,MAAAM,EAAAR"}